<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>Intro to WebRTC</title>
  <meta name="description" content="intro to webrtc">
  <link rel="stylesheet" type="text/css" href="styles.css">
  <script src="/socket.io/socket.io.js"></script>
</head>

<body>
  
  <video id="myVideoTag" autoplay></video>
  <video id="thierVideoTag" autoplay></video>
  <div>
    <input type="file" id="sendFile" />
    <progress id="fileProgress" value="1" max="100"></progress>
    <a id="receivedFileLink"></a>
    <hr />
  </div>
  <div>
    <label>Your Name</label><input id="myName" type="text"/>
    <label>Message</label><input id="myMessage" type="text"/>
    <input id="sendMessage" type="submit"/>
    <div id="chatArea">Message Output:</br></div>
    <div id="signalingArea">Signaling Messages:</br></div>
  </div>
  <script>
    
    var myVideoArea = document.querySelector("#myVideoTag");
    var thierVideoArea = document.querySelector("#thierVideoTag");

    
    var myName = document.querySelector("#myName");
    var myMessage = document.querySelector("#myMessage");
    var sendMessage = document.querySelector("#sendMessage");
    var chatArea = document.querySelector("#chatArea");
    var signalingArea = document.querySelector("#signalingArea");

    var sendFile = document.querySelector("input#sendFile");
    var fileProgress = document.querySelector("progress#fileProgress");
    var downloadLink = document.querySelector('a#receivedFileLink');

    var ROOM = "chat";
    var SIGNAL_ROOM = 'signal';
    var FILES_ROOM = 'files_room';

    var configuration = {
      'iceServers': [{
        'url': 'stun:stun.l.google.com:19302'
      }]
    };

    var rtcPeerConn;
    var dataChannelOptions = {
      ordered: false,
      maxRetransmitTime: 1000
    };

    var dataChannel;
    var receivedFileName;
    var receivedFileSize;
    var fileBuffer = [];
    var fileSize = 0;
    
    io = io.connect();
    io.emit('ready', { "chat_room": ROOM, "signal_room": SIGNAL_ROOM, "files_room": FILES_ROOM });

    io.emit('signal', { type: "user_here", message: "Are you ready for a call?", room: SIGNAL_ROOM });

    io.on('announce', function(data) {
      displayMessage(data.message);
    });

    io.on('message', function(data) {
      displayMessage(data.author + ": " + data.message);
    });

    io.on('files', function(data) {
      receivedFileName = data.filename;
      receivedFileSize = data.filesize;
      displaySignalMessage("websockets says the file on it's way is " + receivedFileName + " (" + receivedFileSize + ")");
    });

    io.on('signaling_message', function(data) {
      displaySignalMessage("Signal Recieved: " + data.type);
      if (!rtcPeerConn) {
        startSignaling();
      }

      if (data.type != "user_here") {
        var message = JSON.parse(data.message);
        if (message.sdp) {
          rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
            // if we received an offer, we need to answer
            if (rtcPeerConn.remoteDescription.type == 'offer') {
              rtcPeerConn.createAnswer(sendLocalDesc, logError);
            }
          }, logError);
        }
        else {
          rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
        }
      }
  
    });

    function startSignaling() {
      displaySignalMessage("starting signaling...");
      rtcPeerConn = new webkitRTCPeerConnection(configuration, null);
      dataChannel = rtcPeerConn.createDataChannel('textMessages', dataChannelOptions);

      dataChannel.onopen = dataChannelStateChanged;
      rtcPeerConn.ondatachannel = receiveDataChannel;

      // send any ice candidates to the other peer
      rtcPeerConn.onicecandidate = function (evt) {
        if (evt.candidate)
          io.emit('signal',{"type":"ice candidate", "message": JSON.stringify({ 'candidate': evt.candidate }), "room":SIGNAL_ROOM});
        displaySignalMessage("completed that ice candidate...");
      };

      // let the 'negotiationneeded' event trigger offer generation
      rtcPeerConn.onnegotiationneeded = function () {
        displaySignalMessage("on negotiation called");
        rtcPeerConn.createOffer(sendLocalDesc, logError);
      }

      // once remote stream arrives, show it in the remote video element
      rtcPeerConn.onaddstream = function (evt) {
        displaySignalMessage("going to add their stream...");
        thierVideoArea.srcObject = evt.stream;
      };

      // get a local stream, show it in our video tag and add it to be sent
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
      navigator.getUserMedia({
        'audio': false,
        'video': {
          minWidth: 320,
          maxWidth: 320,
          minHeight: 180,
          maxHeigth: 180,
        }
      }, function (stream) {
        displaySignalMessage("going to display my stream...");
        myVideoArea.srcObject = stream;
        rtcPeerConn.addStream(stream);
      }, logError);
      
    }

    function dataChannelStateChanged() {
      if (dataChannel.readyState === 'open') {
        displaySignalMessage("Data Channel open");
        dataChannel.onmessage = receivedDataChannelMessage;
      }
    }

    function receiveDataChannel(event) {
      displaySignalMessage("Receiving a data channel");
      dataChannel = event.channel;
      dataChannel.onmessage = receivedDataChannelMessage;
    }

    function receivedDataChannelMessage(event) {
      displaySignalMessage("Incoming Message");
      displayMessage("From data channel: " + event.data);

      //This is where we process incoming files
      fileBuffer.push(event.data);
      fileSize += event.data.byteLength;
      fileProgress.value = fileSize;
      
      //Provide link to downloadable file when complete
      if (fileSize === receivedFileSize) {
        var received = new window.Blob(fileBuffer);
        fileBuffer = [];

        downloadLink.href = URL.createObjectURL(received);
        downloadLink.download = receivedFileName;
        downloadLink.appendChild(document.createTextNode(receivedFileName + "(" + fileSize + ") bytes"));
      }
    }

    function sendLocalDesc(desc) {
				rtcPeerConn.setLocalDescription(desc, function () {
					displaySignalMessage("sending local description");
					io.emit('signal',{"type":"SDP", "message": JSON.stringify({ 'sdp': rtcPeerConn.localDescription }), "room":SIGNAL_ROOM});
				}, logError);
			}
			
			function logError(error) {
				displaySignalMessage(error.name + ': ' + error.message);
			}

    sendMessage.addEventListener('click', function(evt){
      io.emit('send', {author: myName.value, message: myMessage.value, room: ROOM });
      dataChannel.send(myName.value + ' says ' + myMessage.value);
      evt.preventDefault();
    }, false);

    sendFile.addEventListener('change', function(ev){
				var file = sendFile.files[0];
				displaySignalMessage("sending file " + file.name + " (" + file.size + ") ...");
				io.emit('files', {"filename":file.name, "filesize":file.size, "room":FILES_ROOM });
				
				fileProgress.max = file.size;
				var chunkSize = 16384;
				var sliceFile = function(offset) {
					var reader = new window.FileReader();
					reader.onload = (function() {
						return function(e) {
							dataChannel.send(e.target.result);
							if (file.size > offset + e.target.result.byteLength) {
								window.setTimeout(sliceFile, 0, offset + chunkSize);
								}
							fileProgress.value = offset + e.target.result.byteLength;
						};
					})(file);
					var slice = file.slice(offset, offset + chunkSize);
					reader.readAsArrayBuffer(slice);
				};
				sliceFile(0);		
			
			}, false);

    function displayMessage(message) {
      chatArea.innerHTML = chatArea.innerHTML + "<br />" + message;
    }

    function displaySignalMessage(message) {
      signalingArea.innerHTML = signalingArea.innerHTML + "<br />" + message;
    }
    
    
    


  </script>
</body>
</html>